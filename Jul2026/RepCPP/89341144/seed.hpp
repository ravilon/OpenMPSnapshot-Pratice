#pragma once

#include <random>    // std::mt19937_64
#include <armadillo> // arma::sed

namespace pass
{
class seed
{
public:
  /**
   * The random number generator should act as a singleton, no need for default constructors.
   */
  seed() = delete;
  seed(const seed &) = delete;
  seed &operator=(const seed &) = delete;

  /**
   * The std::mersenne_twister_engine requires an l-value (a reference in this case) instead of an r-value.
   * Otherwise, calls like std::uniform_real_distribution<double>(0, 1)(seed::get_generator()) won't compile.
   */
  static std::mt19937_64 &get_generator();

  /**
   * Seeding C++'s and Armadillo's generator.
   */
  static void set_seed(
      const arma::arma_rng::seed_type seed);

  /**
   * Initialise Armadillo's generator with any random seed.
   * This seed will be overwritten later on, no need to store it.
   *
   * For programs using MPI, each node needs to seeded differently in order to avoid a degeneration
   * of the random number generator, due to synchronisation.
   * Basically, we generated as much random numbers as there are nodes and seed the i-th node
   * by the i-th generated random number.
   *
   * Without MPI, using the first random number generated by Armadillo's generator as seed is sufficient.
   */
  static void set_random_seed();

  /**
   * Gets the seed if you want to reproduce the experiment
   */
  static arma::arma_rng::seed_type get_seed();

protected:
  static arma::arma_rng::seed_type seed_;
  static std::mt19937_64 generator_;
};
} // namespace pass
