#pragma once

#include <vector>

namespace numath {
    namespace singleVariableEquations {

        /**
         * Function that analizes a single-variable mathematical function and
         * returns one of it's roots or an approximation of it by trying to find
         * a point in which x=g(x), g being a function generated by applying
         * transformations to the original function. If that point is found,
         * it means that said value is a root of the original function.
         * 
         * arguments:
         *     func: Function pointer to the single-variable function.
         *     gFunc: Function pointer to the helper function.
         *     xa: Initial value of the method. Any number inside the domain of the function.
         *     nIter: Max number of iterations.
         *     tol: Desired tolerance
         *     errorType: String containing the error type.
         * 
         * Returns:
         *     One of the roots inside the interval, or an approximation of it.
         * 
         * Throws:
         *     IterException: When the max number of iterations are exceeded.
         */
        double fixedPoint(double (*func)(double), double (*gFunc)(double), double xa, int nIter, double tol, const char *errorType, std::vector<std::vector<double>> &table);

    }
}