// this code is generated by gen_tensor_dense_vml.sh
#pragma once

#include "../common/monolish_common.hpp"

namespace monolish {
/**
 * @brief
 * Vector and Matrix element-wise math library
 */
namespace vml {

/**
 * @addtogroup tensor_Dense_VML
 * @{
 */

/**
 * \defgroup vml_dnsadd monolish::vml::add
 * @brief element by element addition tensor_Dense tensor A and tensor_Dense
 * tensor B.
 * @{
 */
/**
 * @brief element by element addition tensor_Dense tensor A and tensor_Dense
 * tensor B.
 * @param A monolish tensor_Dense tensor
 * @param B monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void add(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnssub monolish::vml::sub
 * @brief element by element subtract tensor_Dense tensor A and tensor_Dense
 * tensor B.
 * @{
 */
/**
 * @brief element by element subtract tensor_Dense tensor A and tensor_Dense
 * tensor B.
 * @param A monolish tensor_Dense tensor
 * @param B monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void sub(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsmul monolish::vml::mul
 * @brief element by element multiplication tensor_Dense tensor A and
 * tensor_Dense tensor B.
 * @{
 */
/**
 * @brief element by element multiplication tensor_Dense tensor A and
 * tensor_Dense tensor B.
 * @param A monolish tensor_Dense tensor
 * @param B monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void mul(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsdiv monolish::vml::div
 * @brief element by element division tensor_Dense tensor A and tensor_Dense
 * tensor B.
 * @{
 */
/**
 * @brief element by element division tensor_Dense tensor A and tensor_Dense
 * tensor B.
 * @param A monolish tensor_Dense tensor
 * @param B monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void div(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnsadd monolish::vml::add
 * @brief element by element addition scalar alpha and tensor_Dense tensor A.
 * @{
 */
/**
 * @brief element by element addition scalar alpha and tensor_Dense tensor A.
 * @param A monolish tensor_Dense tensor
 * @param alpha scalar value
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void add(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void add(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void add(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void add(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void add(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnssub monolish::vml::sub
 * @brief element by element subtract scalar alpha and tensor_Dense tensor A.
 * @{
 */
/**
 * @brief element by element subtract scalar alpha and tensor_Dense tensor A.
 * @param A monolish tensor_Dense tensor
 * @param alpha scalar value
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void sub(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void sub(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sub(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void sub(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void sub(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnsmul monolish::vml::mul
 * @brief element by element multiplication scalar alpha and tensor_Dense tensor
 * A.
 * @{
 */
/**
 * @brief element by element multiplication scalar alpha and tensor_Dense tensor
 * A.
 * @param A monolish tensor_Dense tensor
 * @param alpha scalar value
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void mul(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void mul(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void mul(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void mul(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void mul(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnsdiv monolish::vml::div
 * @brief element by element division scalar alpha and tensor_Dense tensor A.
 * @{
 */
/**
 * @brief element by element division scalar alpha and tensor_Dense tensor A.
 * @param A monolish tensor_Dense tensor
 * @param alpha scalar value
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void div(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void div(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void div(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void div(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void div(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnspow monolish::vml::pow
 *@brief power to tensor_Dense tensor elements (C[0:N] = pow(A[0:N], B[0:N]))
 * @{
 */
/**
 *@brief power to tensor_Dense tensor elements (C[0:N] = pow(A[0:N], B[0:N]))
 * @param A monolish tensor_Dense tensor
 * @param B monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void pow(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnspow monolish::vml::pow
 * @brief power to tensor_Dense tensor elements by scalar value (C[0:N] =
 * pow(A[0:N], alpha))
 * @{
 */
/**
 * @brief power to tensor_Dense tensor elements by scalar value (C[0:N] =
 * pow(A[0:N], alpha))
 * @param A monolish tensor_Dense tensor
 * @param alpha scalar value
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void pow(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void pow(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void pow(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void pow(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void pow(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnssin monolish::vml::sin
 * @brief sin to tensor_Dense tensor elements (C[0:nnz] = sin(A[0:nnz]))
 * @{
 */
/**
 * @brief sin to tensor_Dense tensor elements (C[0:nnz] = sin(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sin(const tensor::tensor_Dense<double> &A,
         tensor::tensor_Dense<double> &C);
void sin(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void sin(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sin(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sin(const view_tensor_Dense<vector<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void sin(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void sin(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sin(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void sin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void sin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sin(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void sin(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void sin(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sin(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sin(const view_tensor_Dense<vector<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void sin(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void sin(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sin(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void sin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void sin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void sin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnssqrt monolish::vml::sqrt
 * @brief sqrt to tensor_Dense tensor elements (C[0:nnz] = sqrt(A[0:nnz]))
 * @{
 */
/**
 * @brief sqrt to tensor_Dense tensor elements (C[0:nnz] = sqrt(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sqrt(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C);
void sqrt(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sqrt(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sqrt(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sqrt(const view_tensor_Dense<vector<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sqrt(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sqrt(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sqrt(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sqrt(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void sqrt(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sqrt(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sqrt(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sqrt(const view_tensor_Dense<vector<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sqrt(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sqrt(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sqrt(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sqrt(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sqrt(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnssinh monolish::vml::sinh
 * @brief sinh to tensor_Dense tensor elements (C[0:nnz] = sinh(A[0:nnz]))
 * @{
 */
/**
 * @brief sinh to tensor_Dense tensor elements (C[0:nnz] = sinh(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sinh(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C);
void sinh(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sinh(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sinh(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sinh(const view_tensor_Dense<vector<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sinh(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sinh(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sinh(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sinh(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void sinh(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sinh(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sinh(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sinh(const view_tensor_Dense<vector<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sinh(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sinh(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sinh(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsasin monolish::vml::asin
 * @brief asin to tensor_Dense tensor elements (C[0:nnz] = asin(A[0:nnz]))
 * @{
 */
/**
 * @brief asin to tensor_Dense tensor elements (C[0:nnz] = asin(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void asin(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C);
void asin(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void asin(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void asin(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asin(const view_tensor_Dense<vector<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void asin(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void asin(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void asin(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void asin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void asin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void asin(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asin(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void asin(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void asin(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void asin(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void asin(const view_tensor_Dense<vector<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void asin(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void asin(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void asin(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void asin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void asin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void asin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void asin(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void asin(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsasinh monolish::vml::asinh
 * @brief asinh to tensor_Dense tensor elements (C[0:nnz] = asinh(A[0:nnz]))
 * @{
 */
/**
 * @brief asinh to tensor_Dense tensor elements (C[0:nnz] = asinh(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void asinh(const tensor::tensor_Dense<double> &A,
           tensor::tensor_Dense<double> &C);
void asinh(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void asinh(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void asinh(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asinh(const view_tensor_Dense<vector<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void asinh(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void asinh(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void asinh(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void asinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void asinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void asinh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void asinh(const tensor::tensor_Dense<float> &A,
           tensor::tensor_Dense<float> &C);
void asinh(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void asinh(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void asinh(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void asinh(const view_tensor_Dense<vector<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void asinh(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void asinh(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void asinh(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void asinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void asinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void asinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void asinh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void asinh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnstan monolish::vml::tan
 * @brief tan to tensor_Dense tensor elements (C[0:nnz] = tan(A[0:nnz]))
 * @{
 */
/**
 * @brief tan to tensor_Dense tensor elements (C[0:nnz] = tan(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void tan(const tensor::tensor_Dense<double> &A,
         tensor::tensor_Dense<double> &C);
void tan(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void tan(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void tan(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tan(const view_tensor_Dense<vector<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void tan(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void tan(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void tan(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void tan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void tan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void tan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tan(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void tan(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void tan(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void tan(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void tan(const view_tensor_Dense<vector<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void tan(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void tan(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void tan(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void tan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void tan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void tan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void tan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void tan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnstanh monolish::vml::tanh
 * @brief tanh to tensor_Dense tensor elements (C[0:nnz] = tanh(A[0:nnz]))
 * @{
 */
/**
 * @brief tanh to tensor_Dense tensor elements (C[0:nnz] = tanh(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void tanh(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C);
void tanh(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void tanh(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void tanh(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tanh(const view_tensor_Dense<vector<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void tanh(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void tanh(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void tanh(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void tanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void tanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void tanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void tanh(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void tanh(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void tanh(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void tanh(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void tanh(const view_tensor_Dense<vector<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void tanh(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void tanh(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void tanh(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void tanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void tanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void tanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void tanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void tanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsatan monolish::vml::atan
 * @brief atan to tensor_Dense tensor elements (C[0:nnz] = atan(A[0:nnz]))
 * @{
 */
/**
 * @brief atan to tensor_Dense tensor elements (C[0:nnz] = atan(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void atan(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C);
void atan(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void atan(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void atan(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atan(const view_tensor_Dense<vector<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void atan(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void atan(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void atan(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void atan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void atan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void atan(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atan(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void atan(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void atan(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void atan(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void atan(const view_tensor_Dense<vector<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void atan(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void atan(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void atan(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void atan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void atan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void atan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void atan(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void atan(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsatanh monolish::vml::atanh
 * @brief atanh to tensor_Dense tensor elements (C[0:nnz] = atanh(A[0:nnz]))
 * @{
 */
/**
 * @brief atanh to tensor_Dense tensor elements (C[0:nnz] = atanh(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void atanh(const tensor::tensor_Dense<double> &A,
           tensor::tensor_Dense<double> &C);
void atanh(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void atanh(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void atanh(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atanh(const view_tensor_Dense<vector<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void atanh(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void atanh(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void atanh(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void atanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void atanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void atanh(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void atanh(const tensor::tensor_Dense<float> &A,
           tensor::tensor_Dense<float> &C);
void atanh(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void atanh(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void atanh(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void atanh(const view_tensor_Dense<vector<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void atanh(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void atanh(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void atanh(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void atanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void atanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void atanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void atanh(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void atanh(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsceil monolish::vml::ceil
 * @brief ceil to tensor_Dense tensor elements (C[0:nnz] = ceil(A[0:nnz]))
 * @{
 */
/**
 * @brief ceil to tensor_Dense tensor elements (C[0:nnz] = ceil(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void ceil(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C);
void ceil(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void ceil(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void ceil(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void ceil(const view_tensor_Dense<vector<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void ceil(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void ceil(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void ceil(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void ceil(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void ceil(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void ceil(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void ceil(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void ceil(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void ceil(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void ceil(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void ceil(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void ceil(const view_tensor_Dense<vector<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void ceil(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void ceil(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void ceil(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void ceil(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void ceil(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void ceil(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void ceil(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void ceil(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsfloor monolish::vml::floor
 * @brief floor to tensor_Dense tensor elements (C[0:nnz] = floor(A[0:nnz]))
 * @{
 */
/**
 * @brief floor to tensor_Dense tensor elements (C[0:nnz] = floor(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void floor(const tensor::tensor_Dense<double> &A,
           tensor::tensor_Dense<double> &C);
void floor(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void floor(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void floor(const tensor::tensor_Dense<double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void floor(const view_tensor_Dense<vector<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void floor(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void floor(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void floor(const view_tensor_Dense<vector<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void floor(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void floor(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void floor(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void floor(const view_tensor_Dense<matrix::Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           tensor::tensor_Dense<double> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<vector<double>, double> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<matrix::Dense<double>, double> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
           view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void floor(const tensor::tensor_Dense<float> &A,
           tensor::tensor_Dense<float> &C);
void floor(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void floor(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void floor(const tensor::tensor_Dense<float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void floor(const view_tensor_Dense<vector<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void floor(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void floor(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void floor(const view_tensor_Dense<vector<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void floor(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void floor(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void floor(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void floor(const view_tensor_Dense<matrix::Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           tensor::tensor_Dense<float> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<vector<float>, float> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<matrix::Dense<float>, float> &C);
void floor(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
           view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnssign monolish::vml::sign
 * @brief sign to tensor_Dense tensor elements (C[0:nnz] = sign(A[0:nnz]))
 * @{
 */
/**
 * @brief sign to tensor_Dense tensor elements (C[0:nnz] = sign(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sign(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C);
void sign(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sign(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sign(const tensor::tensor_Dense<double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sign(const view_tensor_Dense<vector<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sign(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sign(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sign(const view_tensor_Dense<vector<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sign(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sign(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sign(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sign(const view_tensor_Dense<matrix::Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          tensor::tensor_Dense<double> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<vector<double>, double> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<matrix::Dense<double>, double> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
          view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void sign(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void sign(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sign(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sign(const tensor::tensor_Dense<float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sign(const view_tensor_Dense<vector<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sign(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sign(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sign(const view_tensor_Dense<vector<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sign(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sign(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sign(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sign(const view_tensor_Dense<matrix::Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          tensor::tensor_Dense<float> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<vector<float>, float> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<matrix::Dense<float>, float> &C);
void sign(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
          view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsexp monolish::vml::exp
 * @brief exp to tensor_Dense tensor elements (C[0:nnz] = exp(A[0:nnz]))
 * @{
 */
/**
 * @brief exp to tensor_Dense tensor elements (C[0:nnz] = exp(A[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void exp(const tensor::tensor_Dense<double> &A,
         tensor::tensor_Dense<double> &C);
void exp(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void exp(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void exp(const tensor::tensor_Dense<double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void exp(const view_tensor_Dense<vector<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void exp(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void exp(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void exp(const view_tensor_Dense<vector<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void exp(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void exp(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void exp(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void exp(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         tensor::tensor_Dense<double> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<vector<double>, double> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void exp(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
void exp(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void exp(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void exp(const tensor::tensor_Dense<float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void exp(const view_tensor_Dense<vector<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void exp(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void exp(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void exp(const view_tensor_Dense<vector<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void exp(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void exp(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void exp(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void exp(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         tensor::tensor_Dense<float> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<vector<float>, float> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void exp(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsdnsmax monolish::vml::max
 * @brief Create a new tensor_Dense tensor with greatest elements of two tensors
 * (C[0:nnz] = max(A[0:nnz], B[0:nnz]))
 * @{
 */
/**
 * @brief Create a new tensor_Dense tensor with greatest elements of two tensors
 * (C[0:nnz] = max(A[0:nnz], B[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param B monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void max(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsdnsmin monolish::vml::min
 * @brief Create a new tensor_Dense tensor with smallest elements of two tensors
 * (C[0:nnz] = min(A[0:nnz], B[0:nnz]))
 * @{
 */
/**
 * @brief Create a new tensor_Dense tensor with smallest elements of two tensors
 * (C[0:nnz] = min(A[0:nnz], B[0:nnz]))
 * @param A monolish tensor_Dense tensor
 * @param B monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void min(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const tensor::tensor_Dense<double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<vector<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<matrix::Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const tensor::tensor_Dense<float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<vector<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<matrix::Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnsmax monolish::vml::max
 * @brief Create a new tensor_Dense tensor with greatest elements of
 * tensor_Dense tensor or scalar (C[0:nnz] = max(A[0:nnz], alpha))
 * @{
 */
/**
 * @brief Create a new tensor_Dense tensor with greatest elements of
 * tensor_Dense tensor or scalar (C[0:nnz] = max(A[0:nnz], alpha))
 * @param A monolish tensor_Dense tensor
 * @param alpha scalar value
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void max(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void max(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void max(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void max(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnsmin monolish::vml::min
 * @brief Create a new tensor_Dense tensor with smallest elements of
 * tensor_Dense tensor or scalar (C[0:nnz] = min(A[0:nnz], alpha))
 * @{
 */
/**
 * @brief Create a new tensor_Dense tensor with smallest elements of
 * tensor_Dense tensor or scalar (C[0:nnz] = min(A[0:nnz], alpha))
 * @param A monolish tensor_Dense tensor
 * @param alpha scalar value
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void min(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void min(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const tensor::tensor_Dense<double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, tensor::tensor_Dense<double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, view_tensor_Dense<vector<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void min(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void min(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const tensor::tensor_Dense<float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, tensor::tensor_Dense<float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<vector<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, view_tensor_Dense<matrix::Dense<float>, float> &C);
void min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsmax monolish::vml::max
 * @brief Finds the greatest element in tensor_Dense tensor (max(C[0:nnz]))
 * @{
 */
/**
 * @brief Finds the greatest element in tensor_Dense tensor (max(C[0:nnz]))
 * @param C monolish tensor_Dense tensor
 * @return greatest value
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
[[nodiscard]] double max(const tensor::tensor_Dense<double> &C);
[[nodiscard]] double max(const view_tensor_Dense<vector<double>, double> &C);
[[nodiscard]] double
max(const view_tensor_Dense<matrix::Dense<double>, double> &C);
[[nodiscard]] double
max(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
[[nodiscard]] float max(const tensor::tensor_Dense<float> &C);
[[nodiscard]] float max(const view_tensor_Dense<vector<float>, float> &C);
[[nodiscard]] float
max(const view_tensor_Dense<matrix::Dense<float>, float> &C);
[[nodiscard]] float
max(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsmin monolish::vml::min
 * @brief Finds the smallest element in tensor_Dense tensor (min(C[0:nnz]))
 * @{
 */
/**
 * @brief Finds the smallest element in tensor_Dense tensor (min(C[0:nnz]))
 * @param C monolish tensor_Dense tensor
 * @return smallest value
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
[[nodiscard]] double min(const tensor::tensor_Dense<double> &C);
[[nodiscard]] double min(const view_tensor_Dense<vector<double>, double> &C);
[[nodiscard]] double
min(const view_tensor_Dense<matrix::Dense<double>, double> &C);
[[nodiscard]] double
min(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
[[nodiscard]] float min(const tensor::tensor_Dense<float> &C);
[[nodiscard]] float min(const view_tensor_Dense<vector<float>, float> &C);
[[nodiscard]] float
min(const view_tensor_Dense<matrix::Dense<float>, float> &C);
[[nodiscard]] float
min(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_sdnsalo monolish::vml::alo
 * @brief Asymmetric linear operation to tensor_Dense tensor elements (C[0:nnz]
 * = alpha max(A[0:nnz], 0) + beta min(A[0:nnz], 0))
 * @{
 */
/**
 * @brief Asymmetric linear operation to tensor_Dense tensor elements (C[0:nnz]
 * = alpha max(A[0:nnz], 0) + beta min(A[0:nnz], 0))
 * @param A monolish tensor_Dense tensor
 * @param alpha linear coefficient in positive range
 * @param beta linear coefficient in negative range
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void alo(const tensor::tensor_Dense<double> &A, const double alpha,
         const double beta, tensor::tensor_Dense<double> &C);
void alo(const tensor::tensor_Dense<double> &A, const double alpha,
         const double beta, view_tensor_Dense<vector<double>, double> &C);
void alo(const tensor::tensor_Dense<double> &A, const double alpha,
         const double beta,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void alo(const tensor::tensor_Dense<double> &A, const double alpha,
         const double beta,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void alo(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         const double beta, tensor::tensor_Dense<double> &C);
void alo(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         const double beta, view_tensor_Dense<vector<double>, double> &C);
void alo(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         const double beta,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void alo(const view_tensor_Dense<vector<double>, double> &A, const double alpha,
         const double beta,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void alo(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, const double beta,
         tensor::tensor_Dense<double> &C);
void alo(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, const double beta,
         view_tensor_Dense<vector<double>, double> &C);
void alo(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, const double beta,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void alo(const view_tensor_Dense<matrix::Dense<double>, double> &A,
         const double alpha, const double beta,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, const double beta,
         tensor::tensor_Dense<double> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, const double beta,
         view_tensor_Dense<vector<double>, double> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, const double beta,
         view_tensor_Dense<matrix::Dense<double>, double> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
         const double alpha, const double beta,
         view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void alo(const tensor::tensor_Dense<float> &A, const float alpha,
         const float beta, tensor::tensor_Dense<float> &C);
void alo(const tensor::tensor_Dense<float> &A, const float alpha,
         const float beta, view_tensor_Dense<vector<float>, float> &C);
void alo(const tensor::tensor_Dense<float> &A, const float alpha,
         const float beta, view_tensor_Dense<matrix::Dense<float>, float> &C);
void alo(const tensor::tensor_Dense<float> &A, const float alpha,
         const float beta,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void alo(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         const float beta, tensor::tensor_Dense<float> &C);
void alo(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         const float beta, view_tensor_Dense<vector<float>, float> &C);
void alo(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         const float beta, view_tensor_Dense<matrix::Dense<float>, float> &C);
void alo(const view_tensor_Dense<vector<float>, float> &A, const float alpha,
         const float beta,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void alo(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, const float beta, tensor::tensor_Dense<float> &C);
void alo(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, const float beta,
         view_tensor_Dense<vector<float>, float> &C);
void alo(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, const float beta,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void alo(const view_tensor_Dense<matrix::Dense<float>, float> &A,
         const float alpha, const float beta,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, const float beta, tensor::tensor_Dense<float> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, const float beta,
         view_tensor_Dense<vector<float>, float> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, const float beta,
         view_tensor_Dense<matrix::Dense<float>, float> &C);
void alo(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
         const float alpha, const float beta,
         view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/

/**
 * \defgroup vml_dnsreciprocal monolish::vml::reciprocal
 * @brief Compute reciprocal to tensor_Dense tensor elements (C[0:nnz] = 1 /
 * A[0:nnz])
 * @{
 */
/**
 * @brief Compute reciprocal to tensor_Dense tensor elements (C[0:nnz] = 1 /
 * A[0:nnz])
 * @param A monolish tensor_Dense tensor
 * @param C monolish tensor_Dense tensor
 * @note
 * - # of computation: size
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void reciprocal(const tensor::tensor_Dense<double> &A,
                tensor::tensor_Dense<double> &C);
void reciprocal(const tensor::tensor_Dense<double> &A,
                view_tensor_Dense<vector<double>, double> &C);
void reciprocal(const tensor::tensor_Dense<double> &A,
                view_tensor_Dense<matrix::Dense<double>, double> &C);
void reciprocal(const tensor::tensor_Dense<double> &A,
                view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void reciprocal(const view_tensor_Dense<vector<double>, double> &A,
                tensor::tensor_Dense<double> &C);
void reciprocal(const view_tensor_Dense<vector<double>, double> &A,
                view_tensor_Dense<vector<double>, double> &C);
void reciprocal(const view_tensor_Dense<vector<double>, double> &A,
                view_tensor_Dense<matrix::Dense<double>, double> &C);
void reciprocal(const view_tensor_Dense<vector<double>, double> &A,
                view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<double>, double> &A,
                tensor::tensor_Dense<double> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<double>, double> &A,
                view_tensor_Dense<vector<double>, double> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<double>, double> &A,
                view_tensor_Dense<matrix::Dense<double>, double> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<double>, double> &A,
                view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void reciprocal(
    const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
    tensor::tensor_Dense<double> &C);
void reciprocal(
    const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
    view_tensor_Dense<vector<double>, double> &C);
void reciprocal(
    const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
    view_tensor_Dense<matrix::Dense<double>, double> &C);
void reciprocal(
    const view_tensor_Dense<tensor::tensor_Dense<double>, double> &A,
    view_tensor_Dense<tensor::tensor_Dense<double>, double> &C);
void reciprocal(const tensor::tensor_Dense<float> &A,
                tensor::tensor_Dense<float> &C);
void reciprocal(const tensor::tensor_Dense<float> &A,
                view_tensor_Dense<vector<float>, float> &C);
void reciprocal(const tensor::tensor_Dense<float> &A,
                view_tensor_Dense<matrix::Dense<float>, float> &C);
void reciprocal(const tensor::tensor_Dense<float> &A,
                view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void reciprocal(const view_tensor_Dense<vector<float>, float> &A,
                tensor::tensor_Dense<float> &C);
void reciprocal(const view_tensor_Dense<vector<float>, float> &A,
                view_tensor_Dense<vector<float>, float> &C);
void reciprocal(const view_tensor_Dense<vector<float>, float> &A,
                view_tensor_Dense<matrix::Dense<float>, float> &C);
void reciprocal(const view_tensor_Dense<vector<float>, float> &A,
                view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<float>, float> &A,
                tensor::tensor_Dense<float> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<float>, float> &A,
                view_tensor_Dense<vector<float>, float> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<float>, float> &A,
                view_tensor_Dense<matrix::Dense<float>, float> &C);
void reciprocal(const view_tensor_Dense<matrix::Dense<float>, float> &A,
                view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
void reciprocal(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
                tensor::tensor_Dense<float> &C);
void reciprocal(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
                view_tensor_Dense<vector<float>, float> &C);
void reciprocal(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
                view_tensor_Dense<matrix::Dense<float>, float> &C);
void reciprocal(const view_tensor_Dense<tensor::tensor_Dense<float>, float> &A,
                view_tensor_Dense<tensor::tensor_Dense<float>, float> &C);
/**@}*/
/**@}*/
} // namespace vml
} // namespace monolish
