// this code is generated by gen_vector_vml.sh
#pragma once

#include "../common/monolish_common.hpp"

namespace monolish {
/**
 * @brief
 * Vector and Matrix element-wise math library
 */
namespace vml {

/**
 * @addtogroup Vector_VML
 * @{
 */

/**
 * \defgroup vml_vecadd monolish::vml::add
 * @brief element by element addition of vector a and vector b.
 * @{
 */
/**
 * @brief element by element addition of vector a and vector b.
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void add(const vector<double> &a, const vector<double> &b, vector<double> &y);
void add(const vector<double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void add(const vector<double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const vector<double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const vector<double> &a, const view1D<vector<double>, double> &b,
         vector<double> &y);
void add(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void add(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void add(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a, const vector<double> &b,
         vector<double> &y);
void add(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const vector<float> &a, const vector<float> &b, vector<float> &y);
void add(const vector<float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void add(const vector<float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const vector<float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const vector<float> &a, const view1D<vector<float>, float> &b,
         vector<float> &y);
void add(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         vector<float> &y);
void add(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void add(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void add(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, vector<float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<vector<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<matrix::Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecsub monolish::vml::sub
 * @brief element by element subtract of vector a and vector b.
 * @{
 */
/**
 * @brief element by element subtract of vector a and vector b.
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void sub(const vector<double> &a, const vector<double> &b, vector<double> &y);
void sub(const vector<double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void sub(const vector<double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const vector<double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const vector<double> &a, const view1D<vector<double>, double> &b,
         vector<double> &y);
void sub(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void sub(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void sub(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a, const vector<double> &b,
         vector<double> &y);
void sub(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const vector<float> &a, const vector<float> &b, vector<float> &y);
void sub(const vector<float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void sub(const vector<float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const vector<float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const vector<float> &a, const view1D<vector<float>, float> &b,
         vector<float> &y);
void sub(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         vector<float> &y);
void sub(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void sub(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void sub(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, vector<float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<vector<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecmul monolish::vml::mul
 * @brief element by element multiplication of vector a and vector b.
 * @{
 */
/**
 * @brief element by element multiplication of vector a and vector b.
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void mul(const vector<double> &a, const vector<double> &b, vector<double> &y);
void mul(const vector<double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void mul(const vector<double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const vector<double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const vector<double> &a, const view1D<vector<double>, double> &b,
         vector<double> &y);
void mul(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void mul(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void mul(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a, const vector<double> &b,
         vector<double> &y);
void mul(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const vector<float> &a, const vector<float> &b, vector<float> &y);
void mul(const vector<float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void mul(const vector<float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const vector<float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const vector<float> &a, const view1D<vector<float>, float> &b,
         vector<float> &y);
void mul(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         vector<float> &y);
void mul(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void mul(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void mul(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, vector<float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<vector<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecdiv monolish::vml::div
 * @brief element by element division of vector a and vector b.
 * @{
 */
/**
 * @brief element by element division of vector a and vector b.
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void div(const vector<double> &a, const vector<double> &b, vector<double> &y);
void div(const vector<double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void div(const vector<double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const vector<double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const vector<double> &a, const view1D<vector<double>, double> &b,
         vector<double> &y);
void div(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void div(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void div(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a, const vector<double> &b,
         vector<double> &y);
void div(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const vector<float> &a, const vector<float> &b, vector<float> &y);
void div(const vector<float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void div(const vector<float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const vector<float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const vector<float> &a, const view1D<vector<float>, float> &b,
         vector<float> &y);
void div(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         vector<float> &y);
void div(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void div(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void div(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, vector<float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<vector<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<matrix::Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecadd monolish::vml::add
 * @brief element by element addition of scalar alpha and vector a.
 * @{
 */
/**
 * @brief element by element addition of scalar alpha and vector a.
 * @param a monolish vector (size N)
 * @param alpha scalar value
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void add(const vector<double> &a, const double alpha, vector<double> &y);
void add(const vector<double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void add(const vector<double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void add(const vector<double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a, const double alpha,
         vector<double> &y);
void add(const view1D<vector<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void add(const view1D<vector<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<vector<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         vector<double> &y);
void add(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void add(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, vector<double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<vector<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<matrix::Dense<double>, double> &y);
void add(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<tensor::tensor_Dense<double>, double> &y);
void add(const vector<float> &a, const float alpha, vector<float> &y);
void add(const vector<float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void add(const vector<float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void add(const vector<float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a, const float alpha,
         vector<float> &y);
void add(const view1D<vector<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void add(const view1D<vector<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<vector<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void add(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecsub monolish::vml::sub
 * @brief element by element subtract of scalar alpha and vector a.
 * @{
 */
/**
 * @brief element by element subtract of scalar alpha and vector a.
 * @param a monolish vector (size N)
 * @param alpha scalar value
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void sub(const vector<double> &a, const double alpha, vector<double> &y);
void sub(const vector<double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void sub(const vector<double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void sub(const vector<double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a, const double alpha,
         vector<double> &y);
void sub(const view1D<vector<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void sub(const view1D<vector<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<vector<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         vector<double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, vector<double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<vector<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<matrix::Dense<double>, double> &y);
void sub(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<tensor::tensor_Dense<double>, double> &y);
void sub(const vector<float> &a, const float alpha, vector<float> &y);
void sub(const vector<float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void sub(const vector<float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void sub(const vector<float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a, const float alpha,
         vector<float> &y);
void sub(const view1D<vector<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void sub(const view1D<vector<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<vector<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void sub(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecmul monolish::vml::mul
 * @brief element by element multiplication of scalar alpha and vector a.
 * @{
 */
/**
 * @brief element by element multiplication of scalar alpha and vector a.
 * @param a monolish vector (size N)
 * @param alpha scalar value
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void mul(const vector<double> &a, const double alpha, vector<double> &y);
void mul(const vector<double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void mul(const vector<double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void mul(const vector<double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a, const double alpha,
         vector<double> &y);
void mul(const view1D<vector<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void mul(const view1D<vector<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<vector<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         vector<double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, vector<double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<vector<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<matrix::Dense<double>, double> &y);
void mul(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<tensor::tensor_Dense<double>, double> &y);
void mul(const vector<float> &a, const float alpha, vector<float> &y);
void mul(const vector<float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void mul(const vector<float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void mul(const vector<float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a, const float alpha,
         vector<float> &y);
void mul(const view1D<vector<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void mul(const view1D<vector<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<vector<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void mul(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecdiv monolish::vml::div
 * @brief element by element division of scalar alpha and vector a.
 * @{
 */
/**
 * @brief element by element division of scalar alpha and vector a.
 * @param a monolish vector (size N)
 * @param alpha scalar value
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void div(const vector<double> &a, const double alpha, vector<double> &y);
void div(const vector<double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void div(const vector<double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void div(const vector<double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a, const double alpha,
         vector<double> &y);
void div(const view1D<vector<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void div(const view1D<vector<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<vector<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         vector<double> &y);
void div(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void div(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, vector<double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<vector<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<matrix::Dense<double>, double> &y);
void div(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<tensor::tensor_Dense<double>, double> &y);
void div(const vector<float> &a, const float alpha, vector<float> &y);
void div(const vector<float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void div(const vector<float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void div(const vector<float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a, const float alpha,
         vector<float> &y);
void div(const view1D<vector<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void div(const view1D<vector<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<vector<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void div(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecpow monolish::vml::pow
 * @brief power to vector elements by double precision vector (y[0:N] =
 * pow(a[0:N], b[0]:N]))
 * @{
 */
/**
 * @brief power to vector elements by double precision vector
 *(y[0:N] = pow(a[0:N], b[0]:N]))
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void pow(const vector<double> &a, const vector<double> &b, vector<double> &y);
void pow(const vector<double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void pow(const vector<double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const vector<double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const vector<double> &a, const view1D<vector<double>, double> &b,
         vector<double> &y);
void pow(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void pow(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void pow(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a, const vector<double> &b,
         vector<double> &y);
void pow(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const vector<float> &a, const vector<float> &b, vector<float> &y);
void pow(const vector<float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void pow(const vector<float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const vector<float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const vector<float> &a, const view1D<vector<float>, float> &b,
         vector<float> &y);
void pow(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         vector<float> &y);
void pow(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void pow(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void pow(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, vector<float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<vector<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecpow monolish::vml::pow
 * @brief power to vector elements by double precision scalar value (y[0:N] =
 * pow(a[0:N], alpha))
 * @{
 */
/**
 * @brief power to vector elements by double precision scalar
 *value (y[0:N] = pow(a[0:N], alpha))
 * @param a monolish vector (size N)
 * @param alpha scalar value
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void pow(const vector<double> &a, const double alpha, vector<double> &y);
void pow(const vector<double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void pow(const vector<double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void pow(const vector<double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a, const double alpha,
         vector<double> &y);
void pow(const view1D<vector<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void pow(const view1D<vector<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<vector<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         vector<double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, vector<double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<vector<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<matrix::Dense<double>, double> &y);
void pow(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<tensor::tensor_Dense<double>, double> &y);
void pow(const vector<float> &a, const float alpha, vector<float> &y);
void pow(const vector<float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void pow(const vector<float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void pow(const vector<float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a, const float alpha,
         vector<float> &y);
void pow(const view1D<vector<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void pow(const view1D<vector<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<vector<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void pow(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecsin monolish::vml::sin
 * @brief sin to vector elements (y[0:N] = sin(a[0:N]))
 * @{
 */
/**
 * @brief sin to vector elements (y[0:N] = sin(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sin(const vector<double> &a, vector<double> &y);
void sin(const vector<double> &a, view1D<vector<double>, double> &y);
void sin(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void sin(const vector<double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sin(const view1D<vector<double>, double> &a, vector<double> &y);
void sin(const view1D<vector<double>, double> &a,
         view1D<vector<double>, double> &y);
void sin(const view1D<vector<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void sin(const view1D<vector<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sin(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void sin(const view1D<matrix::Dense<double>, double> &a,
         view1D<vector<double>, double> &y);
void sin(const view1D<matrix::Dense<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void sin(const view1D<matrix::Dense<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sin(const view1D<tensor::tensor_Dense<double>, double> &a,
         vector<double> &y);
void sin(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<vector<double>, double> &y);
void sin(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void sin(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void sin(const vector<float> &a, vector<float> &y);
void sin(const vector<float> &a, view1D<vector<float>, float> &y);
void sin(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void sin(const vector<float> &a, view1D<tensor::tensor_Dense<float>, float> &y);
void sin(const view1D<vector<float>, float> &a, vector<float> &y);
void sin(const view1D<vector<float>, float> &a,
         view1D<vector<float>, float> &y);
void sin(const view1D<vector<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void sin(const view1D<vector<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sin(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void sin(const view1D<matrix::Dense<float>, float> &a,
         view1D<vector<float>, float> &y);
void sin(const view1D<matrix::Dense<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void sin(const view1D<matrix::Dense<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
void sin(const view1D<tensor::tensor_Dense<float>, float> &a, vector<float> &y);
void sin(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<vector<float>, float> &y);
void sin(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void sin(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecsqrt monolish::vml::sqrt
 * @brief sqrt to vector elements (y[0:N] = sqrt(a[0:N]))
 * @{
 */
/**
 * @brief sqrt to vector elements (y[0:N] = sqrt(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sqrt(const vector<double> &a, vector<double> &y);
void sqrt(const vector<double> &a, view1D<vector<double>, double> &y);
void sqrt(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void sqrt(const vector<double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sqrt(const view1D<vector<double>, double> &a, vector<double> &y);
void sqrt(const view1D<vector<double>, double> &a,
          view1D<vector<double>, double> &y);
void sqrt(const view1D<vector<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sqrt(const view1D<vector<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sqrt(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void sqrt(const view1D<matrix::Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void sqrt(const view1D<matrix::Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sqrt(const view1D<matrix::Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sqrt(const view1D<tensor::tensor_Dense<double>, double> &a,
          vector<double> &y);
void sqrt(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void sqrt(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sqrt(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sqrt(const vector<float> &a, vector<float> &y);
void sqrt(const vector<float> &a, view1D<vector<float>, float> &y);
void sqrt(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void sqrt(const vector<float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sqrt(const view1D<vector<float>, float> &a, vector<float> &y);
void sqrt(const view1D<vector<float>, float> &a,
          view1D<vector<float>, float> &y);
void sqrt(const view1D<vector<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sqrt(const view1D<vector<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sqrt(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void sqrt(const view1D<matrix::Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void sqrt(const view1D<matrix::Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sqrt(const view1D<matrix::Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sqrt(const view1D<tensor::tensor_Dense<float>, float> &a,
          vector<float> &y);
void sqrt(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void sqrt(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sqrt(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecsinh monolish::vml::sinh
 * @brief sinh to vector elements (y[0:N] = sinh(a[0:N]))
 * @{
 */
/**
 * @brief sinh to vector elements (y[0:N] = sinh(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sinh(const vector<double> &a, vector<double> &y);
void sinh(const vector<double> &a, view1D<vector<double>, double> &y);
void sinh(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void sinh(const vector<double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sinh(const view1D<vector<double>, double> &a, vector<double> &y);
void sinh(const view1D<vector<double>, double> &a,
          view1D<vector<double>, double> &y);
void sinh(const view1D<vector<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sinh(const view1D<vector<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sinh(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void sinh(const view1D<matrix::Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void sinh(const view1D<matrix::Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sinh(const view1D<matrix::Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sinh(const view1D<tensor::tensor_Dense<double>, double> &a,
          vector<double> &y);
void sinh(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void sinh(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sinh(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sinh(const vector<float> &a, vector<float> &y);
void sinh(const vector<float> &a, view1D<vector<float>, float> &y);
void sinh(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void sinh(const vector<float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sinh(const view1D<vector<float>, float> &a, vector<float> &y);
void sinh(const view1D<vector<float>, float> &a,
          view1D<vector<float>, float> &y);
void sinh(const view1D<vector<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sinh(const view1D<vector<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sinh(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void sinh(const view1D<matrix::Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void sinh(const view1D<matrix::Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sinh(const view1D<matrix::Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sinh(const view1D<tensor::tensor_Dense<float>, float> &a,
          vector<float> &y);
void sinh(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void sinh(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sinh(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecasin monolish::vml::asin
 * @brief asin to vector elements (y[0:N] = asin(a[0:N]))
 * @{
 */
/**
 * @brief asin to vector elements (y[0:N] = asin(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void asin(const vector<double> &a, vector<double> &y);
void asin(const vector<double> &a, view1D<vector<double>, double> &y);
void asin(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void asin(const vector<double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void asin(const view1D<vector<double>, double> &a, vector<double> &y);
void asin(const view1D<vector<double>, double> &a,
          view1D<vector<double>, double> &y);
void asin(const view1D<vector<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void asin(const view1D<vector<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void asin(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void asin(const view1D<matrix::Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void asin(const view1D<matrix::Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void asin(const view1D<matrix::Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void asin(const view1D<tensor::tensor_Dense<double>, double> &a,
          vector<double> &y);
void asin(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void asin(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void asin(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void asin(const vector<float> &a, vector<float> &y);
void asin(const vector<float> &a, view1D<vector<float>, float> &y);
void asin(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void asin(const vector<float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void asin(const view1D<vector<float>, float> &a, vector<float> &y);
void asin(const view1D<vector<float>, float> &a,
          view1D<vector<float>, float> &y);
void asin(const view1D<vector<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void asin(const view1D<vector<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void asin(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void asin(const view1D<matrix::Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void asin(const view1D<matrix::Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void asin(const view1D<matrix::Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void asin(const view1D<tensor::tensor_Dense<float>, float> &a,
          vector<float> &y);
void asin(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void asin(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void asin(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecasinh monolish::vml::asinh
 * @brief asinh to vector elements (y[0:N] = asinh(a[0:N]))
 * @{
 */
/**
 * @brief asinh to vector elements (y[0:N] = asinh(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void asinh(const vector<double> &a, vector<double> &y);
void asinh(const vector<double> &a, view1D<vector<double>, double> &y);
void asinh(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void asinh(const vector<double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void asinh(const view1D<vector<double>, double> &a, vector<double> &y);
void asinh(const view1D<vector<double>, double> &a,
           view1D<vector<double>, double> &y);
void asinh(const view1D<vector<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void asinh(const view1D<vector<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void asinh(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void asinh(const view1D<matrix::Dense<double>, double> &a,
           view1D<vector<double>, double> &y);
void asinh(const view1D<matrix::Dense<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void asinh(const view1D<matrix::Dense<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void asinh(const view1D<tensor::tensor_Dense<double>, double> &a,
           vector<double> &y);
void asinh(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<vector<double>, double> &y);
void asinh(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void asinh(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void asinh(const vector<float> &a, vector<float> &y);
void asinh(const vector<float> &a, view1D<vector<float>, float> &y);
void asinh(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void asinh(const vector<float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void asinh(const view1D<vector<float>, float> &a, vector<float> &y);
void asinh(const view1D<vector<float>, float> &a,
           view1D<vector<float>, float> &y);
void asinh(const view1D<vector<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void asinh(const view1D<vector<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void asinh(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void asinh(const view1D<matrix::Dense<float>, float> &a,
           view1D<vector<float>, float> &y);
void asinh(const view1D<matrix::Dense<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void asinh(const view1D<matrix::Dense<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void asinh(const view1D<tensor::tensor_Dense<float>, float> &a,
           vector<float> &y);
void asinh(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<vector<float>, float> &y);
void asinh(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void asinh(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vectan monolish::vml::tan
 * @brief tan to vector elements (y[0:N] = tan(a[0:N]))
 * @{
 */
/**
 * @brief tan to vector elements (y[0:N] = tan(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void tan(const vector<double> &a, vector<double> &y);
void tan(const vector<double> &a, view1D<vector<double>, double> &y);
void tan(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void tan(const vector<double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void tan(const view1D<vector<double>, double> &a, vector<double> &y);
void tan(const view1D<vector<double>, double> &a,
         view1D<vector<double>, double> &y);
void tan(const view1D<vector<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void tan(const view1D<vector<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void tan(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void tan(const view1D<matrix::Dense<double>, double> &a,
         view1D<vector<double>, double> &y);
void tan(const view1D<matrix::Dense<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void tan(const view1D<matrix::Dense<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void tan(const view1D<tensor::tensor_Dense<double>, double> &a,
         vector<double> &y);
void tan(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<vector<double>, double> &y);
void tan(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void tan(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void tan(const vector<float> &a, vector<float> &y);
void tan(const vector<float> &a, view1D<vector<float>, float> &y);
void tan(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void tan(const vector<float> &a, view1D<tensor::tensor_Dense<float>, float> &y);
void tan(const view1D<vector<float>, float> &a, vector<float> &y);
void tan(const view1D<vector<float>, float> &a,
         view1D<vector<float>, float> &y);
void tan(const view1D<vector<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void tan(const view1D<vector<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
void tan(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void tan(const view1D<matrix::Dense<float>, float> &a,
         view1D<vector<float>, float> &y);
void tan(const view1D<matrix::Dense<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void tan(const view1D<matrix::Dense<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
void tan(const view1D<tensor::tensor_Dense<float>, float> &a, vector<float> &y);
void tan(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<vector<float>, float> &y);
void tan(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void tan(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vectanh monolish::vml::tanh
 * @brief tanh to vector elements (y[0:N] = tanh(a[0:N]))
 * @{
 */
/**
 * @brief tanh to vector elements (y[0:N] = tanh(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void tanh(const vector<double> &a, vector<double> &y);
void tanh(const vector<double> &a, view1D<vector<double>, double> &y);
void tanh(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void tanh(const vector<double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void tanh(const view1D<vector<double>, double> &a, vector<double> &y);
void tanh(const view1D<vector<double>, double> &a,
          view1D<vector<double>, double> &y);
void tanh(const view1D<vector<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void tanh(const view1D<vector<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void tanh(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void tanh(const view1D<matrix::Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void tanh(const view1D<matrix::Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void tanh(const view1D<matrix::Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void tanh(const view1D<tensor::tensor_Dense<double>, double> &a,
          vector<double> &y);
void tanh(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void tanh(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void tanh(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void tanh(const vector<float> &a, vector<float> &y);
void tanh(const vector<float> &a, view1D<vector<float>, float> &y);
void tanh(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void tanh(const vector<float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void tanh(const view1D<vector<float>, float> &a, vector<float> &y);
void tanh(const view1D<vector<float>, float> &a,
          view1D<vector<float>, float> &y);
void tanh(const view1D<vector<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void tanh(const view1D<vector<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void tanh(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void tanh(const view1D<matrix::Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void tanh(const view1D<matrix::Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void tanh(const view1D<matrix::Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void tanh(const view1D<tensor::tensor_Dense<float>, float> &a,
          vector<float> &y);
void tanh(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void tanh(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void tanh(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecatan monolish::vml::atan
 * @brief atan to vector elements (y[0:N] = atan(a[0:N]))
 * @{
 */
/**
 * @brief atan to vector elements (y[0:N] = atan(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void atan(const vector<double> &a, vector<double> &y);
void atan(const vector<double> &a, view1D<vector<double>, double> &y);
void atan(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void atan(const vector<double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void atan(const view1D<vector<double>, double> &a, vector<double> &y);
void atan(const view1D<vector<double>, double> &a,
          view1D<vector<double>, double> &y);
void atan(const view1D<vector<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void atan(const view1D<vector<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void atan(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void atan(const view1D<matrix::Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void atan(const view1D<matrix::Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void atan(const view1D<matrix::Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void atan(const view1D<tensor::tensor_Dense<double>, double> &a,
          vector<double> &y);
void atan(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void atan(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void atan(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void atan(const vector<float> &a, vector<float> &y);
void atan(const vector<float> &a, view1D<vector<float>, float> &y);
void atan(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void atan(const vector<float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void atan(const view1D<vector<float>, float> &a, vector<float> &y);
void atan(const view1D<vector<float>, float> &a,
          view1D<vector<float>, float> &y);
void atan(const view1D<vector<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void atan(const view1D<vector<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void atan(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void atan(const view1D<matrix::Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void atan(const view1D<matrix::Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void atan(const view1D<matrix::Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void atan(const view1D<tensor::tensor_Dense<float>, float> &a,
          vector<float> &y);
void atan(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void atan(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void atan(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecatanh monolish::vml::atanh
 * @brief atanh to vector elements (y[0:N] = atanh(a[0:N]))
 * @{
 */
/**
 * @brief atanh to vector elements (y[0:N] = atanh(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void atanh(const vector<double> &a, vector<double> &y);
void atanh(const vector<double> &a, view1D<vector<double>, double> &y);
void atanh(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void atanh(const vector<double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void atanh(const view1D<vector<double>, double> &a, vector<double> &y);
void atanh(const view1D<vector<double>, double> &a,
           view1D<vector<double>, double> &y);
void atanh(const view1D<vector<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void atanh(const view1D<vector<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void atanh(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void atanh(const view1D<matrix::Dense<double>, double> &a,
           view1D<vector<double>, double> &y);
void atanh(const view1D<matrix::Dense<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void atanh(const view1D<matrix::Dense<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void atanh(const view1D<tensor::tensor_Dense<double>, double> &a,
           vector<double> &y);
void atanh(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<vector<double>, double> &y);
void atanh(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void atanh(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void atanh(const vector<float> &a, vector<float> &y);
void atanh(const vector<float> &a, view1D<vector<float>, float> &y);
void atanh(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void atanh(const vector<float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void atanh(const view1D<vector<float>, float> &a, vector<float> &y);
void atanh(const view1D<vector<float>, float> &a,
           view1D<vector<float>, float> &y);
void atanh(const view1D<vector<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void atanh(const view1D<vector<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void atanh(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void atanh(const view1D<matrix::Dense<float>, float> &a,
           view1D<vector<float>, float> &y);
void atanh(const view1D<matrix::Dense<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void atanh(const view1D<matrix::Dense<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void atanh(const view1D<tensor::tensor_Dense<float>, float> &a,
           vector<float> &y);
void atanh(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<vector<float>, float> &y);
void atanh(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void atanh(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecceil monolish::vml::ceil
 * @brief ceil to vector elements (y[0:N] = ceil(a[0:N]))
 * @{
 */
/**
 * @brief ceil to vector elements (y[0:N] = ceil(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void ceil(const vector<double> &a, vector<double> &y);
void ceil(const vector<double> &a, view1D<vector<double>, double> &y);
void ceil(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void ceil(const vector<double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void ceil(const view1D<vector<double>, double> &a, vector<double> &y);
void ceil(const view1D<vector<double>, double> &a,
          view1D<vector<double>, double> &y);
void ceil(const view1D<vector<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void ceil(const view1D<vector<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void ceil(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void ceil(const view1D<matrix::Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void ceil(const view1D<matrix::Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void ceil(const view1D<matrix::Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void ceil(const view1D<tensor::tensor_Dense<double>, double> &a,
          vector<double> &y);
void ceil(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void ceil(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void ceil(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void ceil(const vector<float> &a, vector<float> &y);
void ceil(const vector<float> &a, view1D<vector<float>, float> &y);
void ceil(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void ceil(const vector<float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void ceil(const view1D<vector<float>, float> &a, vector<float> &y);
void ceil(const view1D<vector<float>, float> &a,
          view1D<vector<float>, float> &y);
void ceil(const view1D<vector<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void ceil(const view1D<vector<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void ceil(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void ceil(const view1D<matrix::Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void ceil(const view1D<matrix::Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void ceil(const view1D<matrix::Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void ceil(const view1D<tensor::tensor_Dense<float>, float> &a,
          vector<float> &y);
void ceil(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void ceil(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void ceil(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecfloor monolish::vml::floor
 * @brief floor to vector elements (y[0:N] = floor(a[0:N]))
 * @{
 */
/**
 * @brief floor to vector elements (y[0:N] = floor(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void floor(const vector<double> &a, vector<double> &y);
void floor(const vector<double> &a, view1D<vector<double>, double> &y);
void floor(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void floor(const vector<double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void floor(const view1D<vector<double>, double> &a, vector<double> &y);
void floor(const view1D<vector<double>, double> &a,
           view1D<vector<double>, double> &y);
void floor(const view1D<vector<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void floor(const view1D<vector<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void floor(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void floor(const view1D<matrix::Dense<double>, double> &a,
           view1D<vector<double>, double> &y);
void floor(const view1D<matrix::Dense<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void floor(const view1D<matrix::Dense<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void floor(const view1D<tensor::tensor_Dense<double>, double> &a,
           vector<double> &y);
void floor(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<vector<double>, double> &y);
void floor(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<matrix::Dense<double>, double> &y);
void floor(const view1D<tensor::tensor_Dense<double>, double> &a,
           view1D<tensor::tensor_Dense<double>, double> &y);
void floor(const vector<float> &a, vector<float> &y);
void floor(const vector<float> &a, view1D<vector<float>, float> &y);
void floor(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void floor(const vector<float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void floor(const view1D<vector<float>, float> &a, vector<float> &y);
void floor(const view1D<vector<float>, float> &a,
           view1D<vector<float>, float> &y);
void floor(const view1D<vector<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void floor(const view1D<vector<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void floor(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void floor(const view1D<matrix::Dense<float>, float> &a,
           view1D<vector<float>, float> &y);
void floor(const view1D<matrix::Dense<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void floor(const view1D<matrix::Dense<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
void floor(const view1D<tensor::tensor_Dense<float>, float> &a,
           vector<float> &y);
void floor(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<vector<float>, float> &y);
void floor(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<matrix::Dense<float>, float> &y);
void floor(const view1D<tensor::tensor_Dense<float>, float> &a,
           view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecsign monolish::vml::sign
 * @brief sign to vector elements (y[0:N] = sign(a[0:N]))
 * @{
 */
/**
 * @brief sign to vector elements (y[0:N] = sign(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void sign(const vector<double> &a, vector<double> &y);
void sign(const vector<double> &a, view1D<vector<double>, double> &y);
void sign(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void sign(const vector<double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sign(const view1D<vector<double>, double> &a, vector<double> &y);
void sign(const view1D<vector<double>, double> &a,
          view1D<vector<double>, double> &y);
void sign(const view1D<vector<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sign(const view1D<vector<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sign(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void sign(const view1D<matrix::Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void sign(const view1D<matrix::Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sign(const view1D<matrix::Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sign(const view1D<tensor::tensor_Dense<double>, double> &a,
          vector<double> &y);
void sign(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<vector<double>, double> &y);
void sign(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<matrix::Dense<double>, double> &y);
void sign(const view1D<tensor::tensor_Dense<double>, double> &a,
          view1D<tensor::tensor_Dense<double>, double> &y);
void sign(const vector<float> &a, vector<float> &y);
void sign(const vector<float> &a, view1D<vector<float>, float> &y);
void sign(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void sign(const vector<float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sign(const view1D<vector<float>, float> &a, vector<float> &y);
void sign(const view1D<vector<float>, float> &a,
          view1D<vector<float>, float> &y);
void sign(const view1D<vector<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sign(const view1D<vector<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sign(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void sign(const view1D<matrix::Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void sign(const view1D<matrix::Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sign(const view1D<matrix::Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
void sign(const view1D<tensor::tensor_Dense<float>, float> &a,
          vector<float> &y);
void sign(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<vector<float>, float> &y);
void sign(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<matrix::Dense<float>, float> &y);
void sign(const view1D<tensor::tensor_Dense<float>, float> &a,
          view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecexp monolish::vml::exp
 * @brief exp to vector elements (y[0:N] = exp(a[0:N]))
 * @{
 */
/**
 * @brief exp to vector elements (y[0:N] = exp(a[0:N]))
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void exp(const vector<double> &a, vector<double> &y);
void exp(const vector<double> &a, view1D<vector<double>, double> &y);
void exp(const vector<double> &a, view1D<matrix::Dense<double>, double> &y);
void exp(const vector<double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void exp(const view1D<vector<double>, double> &a, vector<double> &y);
void exp(const view1D<vector<double>, double> &a,
         view1D<vector<double>, double> &y);
void exp(const view1D<vector<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void exp(const view1D<vector<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void exp(const view1D<matrix::Dense<double>, double> &a, vector<double> &y);
void exp(const view1D<matrix::Dense<double>, double> &a,
         view1D<vector<double>, double> &y);
void exp(const view1D<matrix::Dense<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void exp(const view1D<matrix::Dense<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void exp(const view1D<tensor::tensor_Dense<double>, double> &a,
         vector<double> &y);
void exp(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<vector<double>, double> &y);
void exp(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<matrix::Dense<double>, double> &y);
void exp(const view1D<tensor::tensor_Dense<double>, double> &a,
         view1D<tensor::tensor_Dense<double>, double> &y);
void exp(const vector<float> &a, vector<float> &y);
void exp(const vector<float> &a, view1D<vector<float>, float> &y);
void exp(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void exp(const vector<float> &a, view1D<tensor::tensor_Dense<float>, float> &y);
void exp(const view1D<vector<float>, float> &a, vector<float> &y);
void exp(const view1D<vector<float>, float> &a,
         view1D<vector<float>, float> &y);
void exp(const view1D<vector<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void exp(const view1D<vector<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
void exp(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void exp(const view1D<matrix::Dense<float>, float> &a,
         view1D<vector<float>, float> &y);
void exp(const view1D<matrix::Dense<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void exp(const view1D<matrix::Dense<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
void exp(const view1D<tensor::tensor_Dense<float>, float> &a, vector<float> &y);
void exp(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<vector<float>, float> &y);
void exp(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<matrix::Dense<float>, float> &y);
void exp(const view1D<tensor::tensor_Dense<float>, float> &a,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vvecmax monolish::vml::max
 * @brief Create a new vector with greatest elements of two matrices (y[0:N] =
 * max(a[0:N], b[0:N]))
 * @{
 */
/**
 * @brief Create a new vector with greatest elements of two matrices (y[0:N] =
 * max(a[0:N], b[0:N]))
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void max(const vector<double> &a, const vector<double> &b, vector<double> &y);
void max(const vector<double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void max(const vector<double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const vector<double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const vector<double> &a, const view1D<vector<double>, double> &b,
         vector<double> &y);
void max(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void max(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void max(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a, const vector<double> &b,
         vector<double> &y);
void max(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const vector<float> &a, const vector<float> &b, vector<float> &y);
void max(const vector<float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void max(const vector<float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const vector<float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const vector<float> &a, const view1D<vector<float>, float> &b,
         vector<float> &y);
void max(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         vector<float> &y);
void max(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void max(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void max(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, vector<float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<vector<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<matrix::Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vvecmin monolish::vml::min
 * @brief Create a new vector with smallest elements of two matrices (y[0:N] =
 * min(a[0:N], b[0:N]))
 * @{
 */
/**
 * @brief Create a new vector with smallest elements of two matrices (y[0:N] =
 * min(a[0:N], b[0:N]))
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void min(const vector<double> &a, const vector<double> &b, vector<double> &y);
void min(const vector<double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void min(const vector<double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const vector<double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const vector<double> &a, const view1D<vector<double>, double> &b,
         vector<double> &y);
void min(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const vector<double> &a, const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void min(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const vector<double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void min(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const vector<double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a, const vector<double> &b,
         vector<double> &y);
void min(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a, const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, vector<double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<vector<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b, view1D<matrix::Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const vector<double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b, vector<double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<vector<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b, vector<double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<matrix::Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         vector<double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<vector<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const view1D<tensor::tensor_Dense<double>, double> &b,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const vector<float> &a, const vector<float> &b, vector<float> &y);
void min(const vector<float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void min(const vector<float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const vector<float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const vector<float> &a, const view1D<vector<float>, float> &b,
         vector<float> &y);
void min(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const vector<float> &a, const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         vector<float> &y);
void min(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void min(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const vector<float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void min(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         vector<float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, vector<float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<vector<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<matrix::Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const vector<float> &b, view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b, vector<float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<vector<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b, vector<float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<matrix::Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b, vector<float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<vector<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a,
         const view1D<tensor::tensor_Dense<float>, float> &b,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecmax monolish::vml::max
 * @brief Create a new vector with greatest elements of vector or scalar (y[0:N]
 * = max(a[0:N], alpha))
 * @{
 */
/**
 * @brief Create a new vector with greatest elements of vector or scalar (y[0:N]
 * = max(a[0:N], alpha))
 * @param a monolish vector (size N)
 * @param alpha scalar value
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void max(const vector<double> &a, const double alpha, vector<double> &y);
void max(const vector<double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void max(const vector<double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void max(const vector<double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a, const double alpha,
         vector<double> &y);
void max(const view1D<vector<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void max(const view1D<vector<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<vector<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         vector<double> &y);
void max(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void max(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, vector<double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<vector<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<matrix::Dense<double>, double> &y);
void max(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<tensor::tensor_Dense<double>, double> &y);
void max(const vector<float> &a, const float alpha, vector<float> &y);
void max(const vector<float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void max(const vector<float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void max(const vector<float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a, const float alpha,
         vector<float> &y);
void max(const view1D<vector<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void max(const view1D<vector<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<vector<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void max(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecmin monolish::vml::min
 * @brief Create a new vector with smallest elements of vector or scalar (y[0:N]
 * = min(a[0:N], alpha))
 * @{
 */
/**
 * @brief Create a new vector with smallest elements of vector or scalar (y[0:N]
 * = min(a[0:N], alpha))
 * @param a monolish vector (size N)
 * @param alpha scalar value
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void min(const vector<double> &a, const double alpha, vector<double> &y);
void min(const vector<double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void min(const vector<double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void min(const vector<double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a, const double alpha,
         vector<double> &y);
void min(const view1D<vector<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void min(const view1D<vector<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<vector<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         vector<double> &y);
void min(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<vector<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<matrix::Dense<double>, double> &y);
void min(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         view1D<tensor::tensor_Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, vector<double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<vector<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<matrix::Dense<double>, double> &y);
void min(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, view1D<tensor::tensor_Dense<double>, double> &y);
void min(const vector<float> &a, const float alpha, vector<float> &y);
void min(const vector<float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void min(const vector<float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void min(const vector<float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a, const float alpha,
         vector<float> &y);
void min(const view1D<vector<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void min(const view1D<vector<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<vector<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         vector<float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<vector<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<matrix::Dense<float>, float> &y);
void min(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecmax monolish::vml::max
 * @brief Finds the greatest element in vector (max(y[0:N]))
 * @{
 */
/**
 * @brief Finds the greatest element in vector (max(y[0:N]))
 * @param y monolish vector (size N)
 * @return greatest value
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
[[nodiscard]] double max(const vector<double> &y);
[[nodiscard]] double max(const view1D<vector<double>, double> &y);
[[nodiscard]] double max(const view1D<matrix::Dense<double>, double> &y);
[[nodiscard]] double max(const view1D<tensor::tensor_Dense<double>, double> &y);
[[nodiscard]] float max(const vector<float> &y);
[[nodiscard]] float max(const view1D<vector<float>, float> &y);
[[nodiscard]] float max(const view1D<matrix::Dense<float>, float> &y);
[[nodiscard]] float max(const view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecmin monolish::vml::min
 * @brief Finds the smallest element in vector (min(y[0:N]))
 * @{
 */
/**
 * @brief Finds the smallest element in vector (min(y[0:N]))
 * @param y monolish vector (size N)
 * @return smallest value
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
[[nodiscard]] double min(const vector<double> &y);
[[nodiscard]] double min(const view1D<vector<double>, double> &y);
[[nodiscard]] double min(const view1D<matrix::Dense<double>, double> &y);
[[nodiscard]] double min(const view1D<tensor::tensor_Dense<double>, double> &y);
[[nodiscard]] float min(const vector<float> &y);
[[nodiscard]] float min(const view1D<vector<float>, float> &y);
[[nodiscard]] float min(const view1D<matrix::Dense<float>, float> &y);
[[nodiscard]] float min(const view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_svecalo monolish::vml::alo
 * @brief Asymmetric linear operation to vector elements (y[0:nnz] = alpha
 * max(a[0:nnz], 0) + beta min(a[0:nnz], 0))
 * @{
 */
/**
 * @brief Asymmetric linear operation to vector elements (y[0:nnz] = alpha
 * max(a[0:nnz], 0) + beta min(a[0:nnz], 0))
 * @param a monolish vector (size N)
 * @param alpha linear coefficient in positive range
 * @param beta linear coefficient in negative range
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void alo(const vector<double> &a, const double alpha, const double beta,
         vector<double> &y);
void alo(const vector<double> &a, const double alpha, const double beta,
         view1D<vector<double>, double> &y);
void alo(const vector<double> &a, const double alpha, const double beta,
         view1D<matrix::Dense<double>, double> &y);
void alo(const vector<double> &a, const double alpha, const double beta,
         view1D<tensor::tensor_Dense<double>, double> &y);
void alo(const view1D<vector<double>, double> &a, const double alpha,
         const double beta, vector<double> &y);
void alo(const view1D<vector<double>, double> &a, const double alpha,
         const double beta, view1D<vector<double>, double> &y);
void alo(const view1D<vector<double>, double> &a, const double alpha,
         const double beta, view1D<matrix::Dense<double>, double> &y);
void alo(const view1D<vector<double>, double> &a, const double alpha,
         const double beta, view1D<tensor::tensor_Dense<double>, double> &y);
void alo(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         const double beta, vector<double> &y);
void alo(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         const double beta, view1D<vector<double>, double> &y);
void alo(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         const double beta, view1D<matrix::Dense<double>, double> &y);
void alo(const view1D<matrix::Dense<double>, double> &a, const double alpha,
         const double beta, view1D<tensor::tensor_Dense<double>, double> &y);
void alo(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, const double beta, vector<double> &y);
void alo(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, const double beta,
         view1D<vector<double>, double> &y);
void alo(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, const double beta,
         view1D<matrix::Dense<double>, double> &y);
void alo(const view1D<tensor::tensor_Dense<double>, double> &a,
         const double alpha, const double beta,
         view1D<tensor::tensor_Dense<double>, double> &y);
void alo(const vector<float> &a, const float alpha, const float beta,
         vector<float> &y);
void alo(const vector<float> &a, const float alpha, const float beta,
         view1D<vector<float>, float> &y);
void alo(const vector<float> &a, const float alpha, const float beta,
         view1D<matrix::Dense<float>, float> &y);
void alo(const vector<float> &a, const float alpha, const float beta,
         view1D<tensor::tensor_Dense<float>, float> &y);
void alo(const view1D<vector<float>, float> &a, const float alpha,
         const float beta, vector<float> &y);
void alo(const view1D<vector<float>, float> &a, const float alpha,
         const float beta, view1D<vector<float>, float> &y);
void alo(const view1D<vector<float>, float> &a, const float alpha,
         const float beta, view1D<matrix::Dense<float>, float> &y);
void alo(const view1D<vector<float>, float> &a, const float alpha,
         const float beta, view1D<tensor::tensor_Dense<float>, float> &y);
void alo(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         const float beta, vector<float> &y);
void alo(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         const float beta, view1D<vector<float>, float> &y);
void alo(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         const float beta, view1D<matrix::Dense<float>, float> &y);
void alo(const view1D<matrix::Dense<float>, float> &a, const float alpha,
         const float beta, view1D<tensor::tensor_Dense<float>, float> &y);
void alo(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         const float beta, vector<float> &y);
void alo(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         const float beta, view1D<vector<float>, float> &y);
void alo(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         const float beta, view1D<matrix::Dense<float>, float> &y);
void alo(const view1D<tensor::tensor_Dense<float>, float> &a, const float alpha,
         const float beta, view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/

/**
 * \defgroup vml_vecreciprocal monolish::vml::reciprocal
 * @brief reciprocal to double precision vector elements (y[0:N] = 1 / a[0:N])
 * @{
 */
/**
 * @brief reciprocal to double precision vector elements (y[0:N] = 1 / a[0:N])
 * @param a monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 */
void reciprocal(const vector<double> &a, vector<double> &y);
void reciprocal(const vector<double> &a, view1D<vector<double>, double> &y);
void reciprocal(const vector<double> &a,
                view1D<matrix::Dense<double>, double> &y);
void reciprocal(const vector<double> &a,
                view1D<tensor::tensor_Dense<double>, double> &y);
void reciprocal(const view1D<vector<double>, double> &a, vector<double> &y);
void reciprocal(const view1D<vector<double>, double> &a,
                view1D<vector<double>, double> &y);
void reciprocal(const view1D<vector<double>, double> &a,
                view1D<matrix::Dense<double>, double> &y);
void reciprocal(const view1D<vector<double>, double> &a,
                view1D<tensor::tensor_Dense<double>, double> &y);
void reciprocal(const view1D<matrix::Dense<double>, double> &a,
                vector<double> &y);
void reciprocal(const view1D<matrix::Dense<double>, double> &a,
                view1D<vector<double>, double> &y);
void reciprocal(const view1D<matrix::Dense<double>, double> &a,
                view1D<matrix::Dense<double>, double> &y);
void reciprocal(const view1D<matrix::Dense<double>, double> &a,
                view1D<tensor::tensor_Dense<double>, double> &y);
void reciprocal(const view1D<tensor::tensor_Dense<double>, double> &a,
                vector<double> &y);
void reciprocal(const view1D<tensor::tensor_Dense<double>, double> &a,
                view1D<vector<double>, double> &y);
void reciprocal(const view1D<tensor::tensor_Dense<double>, double> &a,
                view1D<matrix::Dense<double>, double> &y);
void reciprocal(const view1D<tensor::tensor_Dense<double>, double> &a,
                view1D<tensor::tensor_Dense<double>, double> &y);
void reciprocal(const vector<float> &a, vector<float> &y);
void reciprocal(const vector<float> &a, view1D<vector<float>, float> &y);
void reciprocal(const vector<float> &a, view1D<matrix::Dense<float>, float> &y);
void reciprocal(const vector<float> &a,
                view1D<tensor::tensor_Dense<float>, float> &y);
void reciprocal(const view1D<vector<float>, float> &a, vector<float> &y);
void reciprocal(const view1D<vector<float>, float> &a,
                view1D<vector<float>, float> &y);
void reciprocal(const view1D<vector<float>, float> &a,
                view1D<matrix::Dense<float>, float> &y);
void reciprocal(const view1D<vector<float>, float> &a,
                view1D<tensor::tensor_Dense<float>, float> &y);
void reciprocal(const view1D<matrix::Dense<float>, float> &a, vector<float> &y);
void reciprocal(const view1D<matrix::Dense<float>, float> &a,
                view1D<vector<float>, float> &y);
void reciprocal(const view1D<matrix::Dense<float>, float> &a,
                view1D<matrix::Dense<float>, float> &y);
void reciprocal(const view1D<matrix::Dense<float>, float> &a,
                view1D<tensor::tensor_Dense<float>, float> &y);
void reciprocal(const view1D<tensor::tensor_Dense<float>, float> &a,
                vector<float> &y);
void reciprocal(const view1D<tensor::tensor_Dense<float>, float> &a,
                view1D<vector<float>, float> &y);
void reciprocal(const view1D<tensor::tensor_Dense<float>, float> &a,
                view1D<matrix::Dense<float>, float> &y);
void reciprocal(const view1D<tensor::tensor_Dense<float>, float> &a,
                view1D<tensor::tensor_Dense<float>, float> &y);
/**@}*/
/**@}*/
} // namespace vml
} // namespace monolish
